#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

class Solution {
private:
    void dfs(int par, vector<vector<int>>& graph, unordered_map<int,vector<int>>& m, int node, vector<int>& vis, int n){
        vis[node]=1;
        for(int i=0; i<n; ++i){
            int j=graph[node][i];
            if(j==1 && !vis[i]){
                m[i].push_back(par);
                dfs(par,graph,m,i,vis,n);
            }
        }
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial){
        int n=graph.size();
        unordered_map<int,vector<int>> m;

        for(int i=0; i<initial.size(); ++i){
            int par=initial[i];
            vector<int> vis(n,0);
            m[par].push_back(par);
            dfs(par,graph,m,par,vis,n);
        }
        vector<int> v(n,0);

        for(auto i: m){
            if(i.second.size()==1){
                v[i.second[0]]++;
            }
        }
        sort(initial.begin(),initial.end());
        int ans=initial[0];

        for(int i=1; i<initial.size(); ++i){
            if(v[ans] < v[initial[i]]){
                ans=initial[i];
            }
        }
        return ans;
    }
};

int main(){
    return 0;
}